# -*- coding: utf-8 -*-
"""Diabetes Prediction Model 1 (FDS)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RZLWhbmnQiZPOD50BzxFFkEdoaXrGvtf
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv') #all females

diabetes_dataset.head()

diabetes_dataset.describe()

diabetes_dataset.info()

diabetes_dataset['Outcome'].value_counts() #no. of diabetic and non-diabetic ppl

"""0 -> Non Diabetic
1 -> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean() #mean for diabetic and non-diabetic

X = diabetes_dataset.drop(columns = 'Outcome' , axis = 1) #dropping Outcome Column(axis=0)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

#Standardizing Data to lower down the Range of Different Values
scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data #alloting Standardized data to X
Y = diabetes_dataset['Outcome']  #again doing this to just make sure

print(X)
print(Y)

"""TRAIN - TEST SPLIT



"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

classifier = svm.SVC(kernel='linear')  #loading the SVM classifier

classifier.fit(X_train, Y_train)

"""Model Evaluation and Accuracy Score

"""

X_train_prediction = classifier.predict(X_train) #prediction made by Model stored in this variable
training_data_accuracy = accuracy_score(X_train_prediction, Y_train) #comparing the accuracy of the Prediction made by model with Y_train(data of 0,1)

print('Accuracy Score of the training data : ', training_data_accuracy)

"""Accuracy of training data is 78%"""

X_test_prediction = classifier.predict(X_test) #prediction made by Model stored in this variable
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test) #comparing the accuracy of the Prediction made by model with Y_train(data of 0,1)

print('Accuracy Score of the test data : ', testing_data_accuracy)

"""Accuracy Score for test data = 77%

Building Predictive System
"""

input_data = (3,78,50,32,88,31,0.248,26)

input_data_as_numpy_array = np.asarray(input_data)  #changing data as Numpy array

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)  #predicting for only 1 instance rather than for all 768 data

#again standardize
std_data = scaler.transform(input_data_reshaped)
print(std_data)


prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
  print("Person is not Diabetic")
else:
  print("Person is Diabetic")